{"title":"Lab 3 - Deployment and Production Considerations","markdown":{"yaml":{"title":"Lab 3 - Deployment and Production Considerations","author":"Ményssa Cherifa-Luron","date":"today"},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nIn this notebook, you will develop a strong foundational understanding of FastAPI and its capabilities in various contexts, including **machine learning, image processing, and social media interaction.**\n\n## Goals\n\nBy the end of this lab, you should be able to:\n\n- Understand the process of deploying a FastAPI application on Heroku, including setting up environment configurations, creating necessary files, and troubleshooting deployment issues.\n- Learn to add new endpoints to an existing FastAPI application, allowing for image uploads and processing.\n- Gain practical experience in handling images within a web application, including uploading, processing, and generating outputs based on user input.\n- Gain experience in fetching and processing data from external APIs, specifically fetching tweets based on search queries.\n\n## Prerequisites\n\nEnsure you have FastAPI, SQLAlchemy (or SQLModel), Pydantic, and other necessary libraries installed. You’ll also need access to Python and a terminal\n\n## 1. Build an API for Predictions and Deploy on Heroku\n\n### Step 1: Set Up Your Environment\n\n1. **Create a New Directory**: Open your terminal and create a new directory for your project.\n```bash\nmkdir fastapi_prediction_api\ncd fastapi_prediction_api\n```\n\n2. **Set Up a Virtual Environment**: It’s a good practice to use a virtual environment for your projects. You can use `venv` for this.\n```bash\npython3 -m venv venv\nsource venv/bin/activate  # For Linux or Mac\nvenv\\Scripts\\activate  # For Windows\n```\n\n3. **Install Required Libraries**: Install FastAPI, Uvicorn, and libraries for machine learning.\n```bash\npip install fastapi uvicorn scikit-learn joblib numpy\n```\n\n### Step 2: Prepare Your Machine Learning Model\n\n1. **Choose a Dataset**: For this exercise, we will use the classic Iris dataset, which is commonly used for classification tasks. You can download it from [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/iris) or directly use it from `sklearn`.\n\n2. **Train a Simple Model**: Create a new Python file named `train_model.py`to train a logistic regression model on the Iris dataset\n\n3. **Run the Model Training Script**: Execute the script to train the model and save it.\n\n```bash\npython train_model.py\n```\n\n### Step 3: Create the FastAPI Application\n\n1. **Create the FastAPI App**: Create a new Python file named `main.py` to define your FastAPI application.\n\n2. **Load Your Model**: load the trained model and create an API endpoint for predictions.\n\n3. **Define Input Format**: The input format for the `/predict` endpoint should be a list of four numeric values representing the features of the Iris flower: sepal length, sepal width, petal length, and petal width.\n\n### Step 4: Test Your API Locally\n\n1. **Run Your FastAPI Application**: Start your FastAPI app using Uvicorn.\n```bash\nuvicorn main:app --reload\n```\n\n2. **Access the Interactive API Documentation**: Open your browser and navigate to `http://127.0.0.1:8000/docs`. This will open the Swagger UI, where you can test your API.\n\n3. **Send a Test Request**:\n- Click on the `/predict` endpoint in the Swagger UI.\n- Click on \"Try it out\" and input the following sample data: \n```json\n[5.1, 3.5, 1.4, 0.2]\n```\n- Click \"Execute\" to send the request. You should get a response like this:\n```json\n{\"prediction\": 0}\n```\nThis indicates that the API predicts the flower belongs to class 0 (Iris Setosa).\n\n### Step 5: Prepare for Heroku Deployment\n\n1. **Create a `requirements.txt` File**: This file lists all the dependencies your application needs. You can generate it automatically using:\n```bash\npip freeze > requirements.txt\n```\n\n2. **Create a `Procfile`**: This file tells Heroku how to run your application. Create a new file named `Procfile` (with no extension) in your project directory and add the following line:\n```\nweb: uvicorn main:app --host 0.0.0.0 --port ${PORT}\n```\n\n3. **Create a `runtime.txt` File**: Specify the Python version by creating a file named `runtime.txt` and adding your desired version, for example:\n```\npython-3.9.10\n```\n\n### Step 6: Deploy to Heroku\n\n1. **Install the Heroku CLI**: If you haven't already, install the Heroku CLI from [Heroku's official website](https://devcenter.heroku.com/articles/heroku-cli).\n\n2. **Log in to Heroku**: Open your terminal and log into your Heroku account.\n```bash\nheroku login\n```\n\n3. **Create a New Heroku App**: Create a new Heroku app by running the following command. Replace `your-app-name` with a unique name for your app.\n```bash\nheroku create your-app-name\n```\n\n4. **Deploy Your App**:\n- First, initialize a Git repository if you haven’t already:\n```bash\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n- Then, deploy your application to Heroku:\n```bash\ngit push heroku master\n```\n\n5. **Open Your App**: Once the deployment is complete, you can open your app in the browser using:\n```bash\nheroku open\n```\n\n### Step 7: Test Your API on Heroku\n\n1. **Access the Heroku API URL**: Your FastAPI application will now be accessible at the URL provided by Heroku. You can access the interactive API documentation by navigating to:\n```\nhttps://your-app-name.herokuapp.com/docs\n```\n\n2. **Send a Test Request**:\n- Click on the `/predict` endpoint in the Swagger UI on Heroku.\n- Click on \"Try it out\" and input the following sample data: \n```json\n[5.1, 3.5, 1.4, 0.2]\n```\n- Click \"Execute\" to send the request. You should receive a response similar to:\n```json\n{\"prediction\": 0}\n```\n\n### Step 8: Additional Challenges\n\n- **Expand the Model**: Train a more complex model using additional features or different algorithms (e.g., Random Forest, SVM).\n- **Add Error Handling**: Implement error handling to manage invalid inputs and return meaningful error messages.\n- **Enhance the API**: Add more endpoints for different functionalities, such as model evaluation or data visualization.\n- **Implement Logging**: Integrate logging to monitor requests and track performance.\nLet's construct a detailed notebook for the first module on the FastAPI framework, specifically focusing on working with a FastAPI application that serves a Stable Diffusion model. This will guide your students through the process while providing the necessary code examples and project structure.\n\n# 2. Integrating with the Twitter API \n\n### Step 1: Set Up Twitter API Access\n\n**Task:** Obtain access to the Twitter API.\n\n1. **Create a Twitter Developer Account:** Visit the [Twitter Developer portal](https://developer.twitter.com/) and sign up for a developer account if you don't have one.\n\n2. **Create a New Application:**\n- After setting up your account, create a new application to obtain your API keys and access tokens. This process will provide you with:\n- `TWITTER_CONSUMER_KEY`\n- `TWITTER_CONSUMER_SECRET`\n- `TWITTER_ACCESS_TOKEN`\n- `TWITTER_ACCESS_TOKEN_SECRET`\n\n### Step 2: Install Required Libraries\n\n**Task:** Install the necessary libraries for the project.\n\n1. **Open your terminal and run the following command to install `tweepy`, `fastapi`, and `uvicorn`:**\n\n```bash\npip install tweepy fastapi uvicorn\n```\n\n### Step 3: Create the FastAPI Application\n\n**Task:** Set up the FastAPI application and Twitter API client.\n\n1. **Create a new Python file named `twitter_api.py`.**\n\n2. **Set Up FastAPI and Twitter API Client:**\n\n```python\nfrom fastapi import FastAPI, HTTPException\nimport tweepy\nimport os\n\napp = FastAPI()\n\n# Twitter API credentials\nconsumer_key = os.getenv(\"TWITTER_CONSUMER_KEY\")  # Set these environment variables in your system\nconsumer_secret = os.getenv(\"TWITTER_CONSUMER_SECRET\")\naccess_token = os.getenv(\"TWITTER_ACCESS_TOKEN\")\naccess_token_secret = os.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n\n# Authenticate to Twitter\nauth = tweepy.OAuth1UserHandler(consumer_key, consumer_secret, access_token, access_token_secret)\napi = tweepy.API(auth)\n\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10):\n    \"\"\"\n    Fetch tweets based on a search query.\n    Parameters:\n    - query: The search query string\n    - count: The number of tweets to return (default is 10)\n    \"\"\"\n    try:\n        tweets = api.search(q=query, count=count)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n### Step 4: Test Your Twitter API Integration\n\n**Task:** Run and test your FastAPI application.\n\n1. **Run Your FastAPI Application:**\n\n```bash\nuvicorn twitter_api:app --reload\n```\n\n2. **Access the Interactive API Documentation:** Open your browser and navigate to [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs). This will open the Swagger UI.\n\n3. **Send a Test Request:**\n- Click on the `/tweets` endpoint in the Swagger UI.\n- Click on \"Try it out\" and input a search query. For example, you could search for tweets containing the hashtag `#Python`.\n\n   **Example input for the query:**\n\n```plaintext\nquery: \"#Python\"\ncount: 5\n```\n\n- Click \"Execute\" to send the request. You should receive a response with a list of tweets that match your query.\n\n**Example Response:**\n\n```json\n[\n    {\n        \"tweet\": \"Python is an amazing programming language!\",\n        \"user\": \"coder123\",\n        \"created_at\": \"2024-10-14T12:34:56Z\"\n    },\n    {\n        \"tweet\": \"Check out my new Python project!\",\n        \"user\": \"dev_gal\",\n        \"created_at\": \"2024-10-14T12:35:10Z\"\n    }\n]\n```\n\n### Step 5: Additional Challenges\n\n**Task:** Enhance the functionality of your Twitter API integration.\n\n1. **Pagination:** Implement pagination to allow users to fetch more tweets beyond the initial count. You can add parameters for pagination tokens or `max_id` to fetch older tweets.\n\n**Example code for pagination:**\n\n```python\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10, max_id: int = None):\n    try:\n        tweets = api.search(q=query, count=count, max_id=max_id)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n2. **Filter by Language:** Add functionality to filter tweets by language using the `lang` parameter in the Twitter API. \n\n   **Example code for language filtering:**\n\n```python\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10, lang: str = None):\n    try:\n        tweets = api.search(q=query, count=count, lang=lang)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n3. **Sentiment Analysis:** Integrate a sentiment analysis library (like `TextBlob` or `VADER`) to analyze the sentiment of the fetched tweets and return that information in the response.\n\n   **Example code for sentiment analysis using TextBlob:**\n\n```python\nfrom textblob import TextBlob\n\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10):\n    try:\n        tweets = api.search(q=query, count=count)\n        results = []\n        for tweet in tweets:\n            analysis = TextBlob(tweet.text)\n            results.append({\n                \"tweet\": tweet.text,\n                \"user\": tweet.user.screen_name,\n                \"created_at\": tweet.created_at,\n                \"sentiment\": analysis.sentiment.polarity  # Adding sentiment polarity\n            })\n        return results\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n### Project Structure\nHere’s a suggested project structure for your FastAPI Twitter application:\n\n```\nfastapi_twitter_integration/\n├── twitter_api.py               # Main application file\n├── requirements.txt              # Dependency file\n└── README.md                     # Project documentation\n```\n","srcMarkdownNoYaml":"\n\n## Overview\n\nIn this notebook, you will develop a strong foundational understanding of FastAPI and its capabilities in various contexts, including **machine learning, image processing, and social media interaction.**\n\n## Goals\n\nBy the end of this lab, you should be able to:\n\n- Understand the process of deploying a FastAPI application on Heroku, including setting up environment configurations, creating necessary files, and troubleshooting deployment issues.\n- Learn to add new endpoints to an existing FastAPI application, allowing for image uploads and processing.\n- Gain practical experience in handling images within a web application, including uploading, processing, and generating outputs based on user input.\n- Gain experience in fetching and processing data from external APIs, specifically fetching tweets based on search queries.\n\n## Prerequisites\n\nEnsure you have FastAPI, SQLAlchemy (or SQLModel), Pydantic, and other necessary libraries installed. You’ll also need access to Python and a terminal\n\n## 1. Build an API for Predictions and Deploy on Heroku\n\n### Step 1: Set Up Your Environment\n\n1. **Create a New Directory**: Open your terminal and create a new directory for your project.\n```bash\nmkdir fastapi_prediction_api\ncd fastapi_prediction_api\n```\n\n2. **Set Up a Virtual Environment**: It’s a good practice to use a virtual environment for your projects. You can use `venv` for this.\n```bash\npython3 -m venv venv\nsource venv/bin/activate  # For Linux or Mac\nvenv\\Scripts\\activate  # For Windows\n```\n\n3. **Install Required Libraries**: Install FastAPI, Uvicorn, and libraries for machine learning.\n```bash\npip install fastapi uvicorn scikit-learn joblib numpy\n```\n\n### Step 2: Prepare Your Machine Learning Model\n\n1. **Choose a Dataset**: For this exercise, we will use the classic Iris dataset, which is commonly used for classification tasks. You can download it from [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/iris) or directly use it from `sklearn`.\n\n2. **Train a Simple Model**: Create a new Python file named `train_model.py`to train a logistic regression model on the Iris dataset\n\n3. **Run the Model Training Script**: Execute the script to train the model and save it.\n\n```bash\npython train_model.py\n```\n\n### Step 3: Create the FastAPI Application\n\n1. **Create the FastAPI App**: Create a new Python file named `main.py` to define your FastAPI application.\n\n2. **Load Your Model**: load the trained model and create an API endpoint for predictions.\n\n3. **Define Input Format**: The input format for the `/predict` endpoint should be a list of four numeric values representing the features of the Iris flower: sepal length, sepal width, petal length, and petal width.\n\n### Step 4: Test Your API Locally\n\n1. **Run Your FastAPI Application**: Start your FastAPI app using Uvicorn.\n```bash\nuvicorn main:app --reload\n```\n\n2. **Access the Interactive API Documentation**: Open your browser and navigate to `http://127.0.0.1:8000/docs`. This will open the Swagger UI, where you can test your API.\n\n3. **Send a Test Request**:\n- Click on the `/predict` endpoint in the Swagger UI.\n- Click on \"Try it out\" and input the following sample data: \n```json\n[5.1, 3.5, 1.4, 0.2]\n```\n- Click \"Execute\" to send the request. You should get a response like this:\n```json\n{\"prediction\": 0}\n```\nThis indicates that the API predicts the flower belongs to class 0 (Iris Setosa).\n\n### Step 5: Prepare for Heroku Deployment\n\n1. **Create a `requirements.txt` File**: This file lists all the dependencies your application needs. You can generate it automatically using:\n```bash\npip freeze > requirements.txt\n```\n\n2. **Create a `Procfile`**: This file tells Heroku how to run your application. Create a new file named `Procfile` (with no extension) in your project directory and add the following line:\n```\nweb: uvicorn main:app --host 0.0.0.0 --port ${PORT}\n```\n\n3. **Create a `runtime.txt` File**: Specify the Python version by creating a file named `runtime.txt` and adding your desired version, for example:\n```\npython-3.9.10\n```\n\n### Step 6: Deploy to Heroku\n\n1. **Install the Heroku CLI**: If you haven't already, install the Heroku CLI from [Heroku's official website](https://devcenter.heroku.com/articles/heroku-cli).\n\n2. **Log in to Heroku**: Open your terminal and log into your Heroku account.\n```bash\nheroku login\n```\n\n3. **Create a New Heroku App**: Create a new Heroku app by running the following command. Replace `your-app-name` with a unique name for your app.\n```bash\nheroku create your-app-name\n```\n\n4. **Deploy Your App**:\n- First, initialize a Git repository if you haven’t already:\n```bash\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n- Then, deploy your application to Heroku:\n```bash\ngit push heroku master\n```\n\n5. **Open Your App**: Once the deployment is complete, you can open your app in the browser using:\n```bash\nheroku open\n```\n\n### Step 7: Test Your API on Heroku\n\n1. **Access the Heroku API URL**: Your FastAPI application will now be accessible at the URL provided by Heroku. You can access the interactive API documentation by navigating to:\n```\nhttps://your-app-name.herokuapp.com/docs\n```\n\n2. **Send a Test Request**:\n- Click on the `/predict` endpoint in the Swagger UI on Heroku.\n- Click on \"Try it out\" and input the following sample data: \n```json\n[5.1, 3.5, 1.4, 0.2]\n```\n- Click \"Execute\" to send the request. You should receive a response similar to:\n```json\n{\"prediction\": 0}\n```\n\n### Step 8: Additional Challenges\n\n- **Expand the Model**: Train a more complex model using additional features or different algorithms (e.g., Random Forest, SVM).\n- **Add Error Handling**: Implement error handling to manage invalid inputs and return meaningful error messages.\n- **Enhance the API**: Add more endpoints for different functionalities, such as model evaluation or data visualization.\n- **Implement Logging**: Integrate logging to monitor requests and track performance.\nLet's construct a detailed notebook for the first module on the FastAPI framework, specifically focusing on working with a FastAPI application that serves a Stable Diffusion model. This will guide your students through the process while providing the necessary code examples and project structure.\n\n# 2. Integrating with the Twitter API \n\n### Step 1: Set Up Twitter API Access\n\n**Task:** Obtain access to the Twitter API.\n\n1. **Create a Twitter Developer Account:** Visit the [Twitter Developer portal](https://developer.twitter.com/) and sign up for a developer account if you don't have one.\n\n2. **Create a New Application:**\n- After setting up your account, create a new application to obtain your API keys and access tokens. This process will provide you with:\n- `TWITTER_CONSUMER_KEY`\n- `TWITTER_CONSUMER_SECRET`\n- `TWITTER_ACCESS_TOKEN`\n- `TWITTER_ACCESS_TOKEN_SECRET`\n\n### Step 2: Install Required Libraries\n\n**Task:** Install the necessary libraries for the project.\n\n1. **Open your terminal and run the following command to install `tweepy`, `fastapi`, and `uvicorn`:**\n\n```bash\npip install tweepy fastapi uvicorn\n```\n\n### Step 3: Create the FastAPI Application\n\n**Task:** Set up the FastAPI application and Twitter API client.\n\n1. **Create a new Python file named `twitter_api.py`.**\n\n2. **Set Up FastAPI and Twitter API Client:**\n\n```python\nfrom fastapi import FastAPI, HTTPException\nimport tweepy\nimport os\n\napp = FastAPI()\n\n# Twitter API credentials\nconsumer_key = os.getenv(\"TWITTER_CONSUMER_KEY\")  # Set these environment variables in your system\nconsumer_secret = os.getenv(\"TWITTER_CONSUMER_SECRET\")\naccess_token = os.getenv(\"TWITTER_ACCESS_TOKEN\")\naccess_token_secret = os.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n\n# Authenticate to Twitter\nauth = tweepy.OAuth1UserHandler(consumer_key, consumer_secret, access_token, access_token_secret)\napi = tweepy.API(auth)\n\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10):\n    \"\"\"\n    Fetch tweets based on a search query.\n    Parameters:\n    - query: The search query string\n    - count: The number of tweets to return (default is 10)\n    \"\"\"\n    try:\n        tweets = api.search(q=query, count=count)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n### Step 4: Test Your Twitter API Integration\n\n**Task:** Run and test your FastAPI application.\n\n1. **Run Your FastAPI Application:**\n\n```bash\nuvicorn twitter_api:app --reload\n```\n\n2. **Access the Interactive API Documentation:** Open your browser and navigate to [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs). This will open the Swagger UI.\n\n3. **Send a Test Request:**\n- Click on the `/tweets` endpoint in the Swagger UI.\n- Click on \"Try it out\" and input a search query. For example, you could search for tweets containing the hashtag `#Python`.\n\n   **Example input for the query:**\n\n```plaintext\nquery: \"#Python\"\ncount: 5\n```\n\n- Click \"Execute\" to send the request. You should receive a response with a list of tweets that match your query.\n\n**Example Response:**\n\n```json\n[\n    {\n        \"tweet\": \"Python is an amazing programming language!\",\n        \"user\": \"coder123\",\n        \"created_at\": \"2024-10-14T12:34:56Z\"\n    },\n    {\n        \"tweet\": \"Check out my new Python project!\",\n        \"user\": \"dev_gal\",\n        \"created_at\": \"2024-10-14T12:35:10Z\"\n    }\n]\n```\n\n### Step 5: Additional Challenges\n\n**Task:** Enhance the functionality of your Twitter API integration.\n\n1. **Pagination:** Implement pagination to allow users to fetch more tweets beyond the initial count. You can add parameters for pagination tokens or `max_id` to fetch older tweets.\n\n**Example code for pagination:**\n\n```python\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10, max_id: int = None):\n    try:\n        tweets = api.search(q=query, count=count, max_id=max_id)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n2. **Filter by Language:** Add functionality to filter tweets by language using the `lang` parameter in the Twitter API. \n\n   **Example code for language filtering:**\n\n```python\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10, lang: str = None):\n    try:\n        tweets = api.search(q=query, count=count, lang=lang)\n        return [{\"tweet\": tweet.text, \"user\": tweet.user.screen_name, \"created_at\": tweet.created_at} for tweet in tweets]\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n3. **Sentiment Analysis:** Integrate a sentiment analysis library (like `TextBlob` or `VADER`) to analyze the sentiment of the fetched tweets and return that information in the response.\n\n   **Example code for sentiment analysis using TextBlob:**\n\n```python\nfrom textblob import TextBlob\n\n@app.get(\"/tweets\")\nasync def get_tweets(query: str, count: int = 10):\n    try:\n        tweets = api.search(q=query, count=count)\n        results = []\n        for tweet in tweets:\n            analysis = TextBlob(tweet.text)\n            results.append({\n                \"tweet\": tweet.text,\n                \"user\": tweet.user.screen_name,\n                \"created_at\": tweet.created_at,\n                \"sentiment\": analysis.sentiment.polarity  # Adding sentiment polarity\n            })\n        return results\n    except tweepy.TweepError as e:\n        raise HTTPException(status_code=500, detail=\"Error fetching tweets: \" + str(e))\n```\n\n### Project Structure\nHere’s a suggested project structure for your FastAPI Twitter application:\n\n```\nfastapi_twitter_integration/\n├── twitter_api.py               # Main application file\n├── requirements.txt              # Dependency file\n└── README.md                     # Project documentation\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"03_Lab.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","code-summary":"Show the code","theme":{"light":["flatly","../styles.scss"]},"title":"Lab 3 - Deployment and Production Considerations","author":"Ményssa Cherifa-Luron","date":"today"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}