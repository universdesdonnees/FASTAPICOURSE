{"title":"ðŸ“‘ Instructors","markdown":{"yaml":{"title":"ðŸ“‘ Instructors","subtitle":"HealthPredictor: A Healthcare Machine Learning Application"},"headingText":"Project Objectives","containsRefs":false,"markdown":"\n\nWelcome to the **HealthPredictor Project** guide! \n\nThis document outlines the framework for delivering the **HealthPredictor project**, designed for students to develop a comprehensive full-stack healthcare application. \n\nThis project combines machine learning, FastAPI for the backend, and a modern frontend framework. Through this experience, students will gain valuable insights and hands-on skills relevant to real-world healthcare challenges.\n\n\nBy the end of this project, students will be able to:\n\n1. **Develop a FastAPI application** with machine learning capabilities to predict health risks based on user input.\n2. **Create a responsive frontend** using a JavaScript framework (React, Vue.js, or Angular) that interacts seamlessly with the backend.\n3. **Implement RESTful API endpoints** for data management and predictions.\n4. **Deploy the application** using Docker and set up Continuous Integration/Continuous Deployment (CI/CD) pipelines for automated deployment.\n5. **Apply best practices in software development**, including code organization, documentation, and testing methodologies.\n\n## Project Structure and Phases\n\n[The FastAPI FullStack template](https://github.com/fastapi/full-stack-fastapi-template)\n\n### Phase 1: Research and Planning (1 week)\n\n- **Activities**:\n  - Students select a healthcare dataset (e.g., heart disease, diabetes, or other relevant datasets).\n  - Outline the features and functionalities of the application, including user input forms and prediction results.\n  - Design the database schema, ensuring it meets the application's requirements.\n\n- **Deliverables**:\n  - **Dataset Selection Document**: Justification for the chosen dataset and its relevance to the project.\n  - **Project Feature List**: A comprehensive list of features and functionalities.\n  - **Initial Wireframe Designs**: Mockups of the user interface and user experience.\n  - **Database Schema Diagram**: Visual representation of the database structure.\n\n### Phase 2: Backend Development (2 weeks)\n\n- **Activities**:\n  - Develop the FastAPI application to handle backend logic.\n  - Create scripts for building and training machine learning models using libraries like scikit-learn or TensorFlow.\n  - Implement SQLAlchemy for database management, ensuring proper connections to the selected relational database (e.g., PostgreSQL or SQLite).\n\n- **Deliverables**:\n  - **FastAPI Application Code**: Codebase for the backend with endpoints for model training, predictions, and CRUD operations.\n  - **API Documentation**: Auto-generated documentation using Swagger, including endpoint specifications.\n  - **Database Migration Scripts**: Scripts to set up the database schema and tables.\n\n### Phase 3: Frontend Development (2 weeks)\n\n- **Activities**:\n  - Build the user interface using Streamlit, React, Vue.js, or Angular, ensuring it is intuitive and user-friendly.\n  - Integrate the frontend with the FastAPI backend using Axios or Fetch API for data transmission.\n  - Implement data visualization components to present prediction results and insights.\n\n- **Deliverables**:\n  - **Frontend Codebase**: Complete code for the user interface.\n  - **User Interface Designs**: Documentation on UI components and their functionalities.\n  - **API Integration Documentation**: Guidelines on how the frontend interacts with the backend.\n\n### Phase 4: Testing and Deployment (1 week)\n\n- **Activities**:\n  - Conduct thorough testing of the application for functionality, usability, and performance.\n  - Containerize both backend and frontend applications using Docker to simplify deployment.\n  - Deploy the applications to cloud platforms (e.g., AWS, Heroku, or Azure) and set up CI/CD pipelines using GitHub Actions or similar tools.\n\n- **Deliverables**:\n  - **Test Cases and Results**: Documentation of testing strategies and results obtained.\n  - **Dockerfiles**: Configuration files for containerizing both applications.\n  - **Deployment Instructions**: Comprehensive guidelines for deploying the application, including CI/CD pipeline configurations.\n\n## Assessment Criteria\n\n1. **Functionality** (30%)\n   - Does the application perform the required predictions accurately?\n   - Are all specified features implemented correctly?\n\n2. **Code Quality** (25%)\n   - Is the code well-structured, organized, and documented?\n   - Are best practices followed in both backend and frontend development?\n\n3. **User Experience** (20%)\n   - Is the user interface intuitive, responsive, and aesthetically pleasing?\n   - Are the visualizations clear, meaningful, and useful for end-users?\n\n4. **Deployment** (15%)\n   - Is the application deployed successfully with proper accessibility and performance?\n   - Are CI/CD pipelines functioning correctly and efficiently?\n\n5. **Presentation and Documentation** (10%)\n   - Is the project documentation clear, comprehensive, and well-structured?\n   - Did the team effectively present their project and findings, demonstrating an understanding of the technologies used?\n\n## Supporting Materials\n\n- **Datasets**:\n  - [UCI Machine Learning Repository: Heart Disease Dataset](https://archive.ics.uci.edu/ml/datasets/heart+Disease)\n  - [Kaggle: Diabetes Dataset](https://www.kaggle.com/uciml/pima-indians-diabetes-database)\n\n- **FastAPI Documentation**:\n  - [FastAPI Official Documentation](https://fastapi.tiangolo.com/)\n\n- **Frontend Framework Documentation**:\n  - [React Documentation](https://reactjs.org/docs/getting-started.html)\n  - [Vue.js Documentation](https://vuejs.org/v2/guide/)\n  - [Angular Documentation](https://angular.io/docs)\n\n- **Docker Documentation**:\n  - [Docker Official Documentation](https://docs.docker.com/)\n\n- **CI/CD Resources**:\n  - [GitHub Actions Documentation](https://docs.github.com/en/actions)\n\nFeel free to adapt the timeline and assessment criteria to best fit your course structure and learning objectives! \n\nLet's inspire the next generation of developers to innovate in healthcare technology!","srcMarkdownNoYaml":"\n\nWelcome to the **HealthPredictor Project** guide! \n\nThis document outlines the framework for delivering the **HealthPredictor project**, designed for students to develop a comprehensive full-stack healthcare application. \n\nThis project combines machine learning, FastAPI for the backend, and a modern frontend framework. Through this experience, students will gain valuable insights and hands-on skills relevant to real-world healthcare challenges.\n\n## Project Objectives\n\nBy the end of this project, students will be able to:\n\n1. **Develop a FastAPI application** with machine learning capabilities to predict health risks based on user input.\n2. **Create a responsive frontend** using a JavaScript framework (React, Vue.js, or Angular) that interacts seamlessly with the backend.\n3. **Implement RESTful API endpoints** for data management and predictions.\n4. **Deploy the application** using Docker and set up Continuous Integration/Continuous Deployment (CI/CD) pipelines for automated deployment.\n5. **Apply best practices in software development**, including code organization, documentation, and testing methodologies.\n\n## Project Structure and Phases\n\n[The FastAPI FullStack template](https://github.com/fastapi/full-stack-fastapi-template)\n\n### Phase 1: Research and Planning (1 week)\n\n- **Activities**:\n  - Students select a healthcare dataset (e.g., heart disease, diabetes, or other relevant datasets).\n  - Outline the features and functionalities of the application, including user input forms and prediction results.\n  - Design the database schema, ensuring it meets the application's requirements.\n\n- **Deliverables**:\n  - **Dataset Selection Document**: Justification for the chosen dataset and its relevance to the project.\n  - **Project Feature List**: A comprehensive list of features and functionalities.\n  - **Initial Wireframe Designs**: Mockups of the user interface and user experience.\n  - **Database Schema Diagram**: Visual representation of the database structure.\n\n### Phase 2: Backend Development (2 weeks)\n\n- **Activities**:\n  - Develop the FastAPI application to handle backend logic.\n  - Create scripts for building and training machine learning models using libraries like scikit-learn or TensorFlow.\n  - Implement SQLAlchemy for database management, ensuring proper connections to the selected relational database (e.g., PostgreSQL or SQLite).\n\n- **Deliverables**:\n  - **FastAPI Application Code**: Codebase for the backend with endpoints for model training, predictions, and CRUD operations.\n  - **API Documentation**: Auto-generated documentation using Swagger, including endpoint specifications.\n  - **Database Migration Scripts**: Scripts to set up the database schema and tables.\n\n### Phase 3: Frontend Development (2 weeks)\n\n- **Activities**:\n  - Build the user interface using Streamlit, React, Vue.js, or Angular, ensuring it is intuitive and user-friendly.\n  - Integrate the frontend with the FastAPI backend using Axios or Fetch API for data transmission.\n  - Implement data visualization components to present prediction results and insights.\n\n- **Deliverables**:\n  - **Frontend Codebase**: Complete code for the user interface.\n  - **User Interface Designs**: Documentation on UI components and their functionalities.\n  - **API Integration Documentation**: Guidelines on how the frontend interacts with the backend.\n\n### Phase 4: Testing and Deployment (1 week)\n\n- **Activities**:\n  - Conduct thorough testing of the application for functionality, usability, and performance.\n  - Containerize both backend and frontend applications using Docker to simplify deployment.\n  - Deploy the applications to cloud platforms (e.g., AWS, Heroku, or Azure) and set up CI/CD pipelines using GitHub Actions or similar tools.\n\n- **Deliverables**:\n  - **Test Cases and Results**: Documentation of testing strategies and results obtained.\n  - **Dockerfiles**: Configuration files for containerizing both applications.\n  - **Deployment Instructions**: Comprehensive guidelines for deploying the application, including CI/CD pipeline configurations.\n\n## Assessment Criteria\n\n1. **Functionality** (30%)\n   - Does the application perform the required predictions accurately?\n   - Are all specified features implemented correctly?\n\n2. **Code Quality** (25%)\n   - Is the code well-structured, organized, and documented?\n   - Are best practices followed in both backend and frontend development?\n\n3. **User Experience** (20%)\n   - Is the user interface intuitive, responsive, and aesthetically pleasing?\n   - Are the visualizations clear, meaningful, and useful for end-users?\n\n4. **Deployment** (15%)\n   - Is the application deployed successfully with proper accessibility and performance?\n   - Are CI/CD pipelines functioning correctly and efficiently?\n\n5. **Presentation and Documentation** (10%)\n   - Is the project documentation clear, comprehensive, and well-structured?\n   - Did the team effectively present their project and findings, demonstrating an understanding of the technologies used?\n\n## Supporting Materials\n\n- **Datasets**:\n  - [UCI Machine Learning Repository: Heart Disease Dataset](https://archive.ics.uci.edu/ml/datasets/heart+Disease)\n  - [Kaggle: Diabetes Dataset](https://www.kaggle.com/uciml/pima-indians-diabetes-database)\n\n- **FastAPI Documentation**:\n  - [FastAPI Official Documentation](https://fastapi.tiangolo.com/)\n\n- **Frontend Framework Documentation**:\n  - [React Documentation](https://reactjs.org/docs/getting-started.html)\n  - [Vue.js Documentation](https://vuejs.org/v2/guide/)\n  - [Angular Documentation](https://angular.io/docs)\n\n- **Docker Documentation**:\n  - [Docker Official Documentation](https://docs.docker.com/)\n\n- **CI/CD Resources**:\n  - [GitHub Actions Documentation](https://docs.github.com/en/actions)\n\nFeel free to adapt the timeline and assessment criteria to best fit your course structure and learning objectives! \n\nLet's inspire the next generation of developers to innovate in healthcare technology!"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"assessment_materials.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","code-summary":"Show the code","theme":{"light":["flatly","../styles.scss"]},"title":"ðŸ“‘ Instructors","subtitle":"HealthPredictor: A Healthcare Machine Learning Application"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}