{"title":"Lab 1 - Introduction to FastAPI & Development Setup","markdown":{"yaml":{"title":"Lab 1 - Introduction to FastAPI & Development Setup","subtitle":"Solutions","author":"MÃ©nyssa Cherifa-Luron","date":"today"},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nIn this lab, you will guide your students through setting up their development environment and creating foundational API endpoints using FastAPI. \n\nThese exercises are designed to build proficiency in constructing robust APIs. Encourage students to ask questions and explore, as they embark on their coding journey. May the code be with them! \n\n## Goals\n\nYou will help students achieve the following:\n\n- **Set up a Virtual Environment:** Ensure students understand how to create and activate a virtual environment for Python projects, emphasizing the importance of isolated environments for dependency management.\n\n- **Install FastAPI and Uvicorn:** Guide students through installing FastAPI and Uvicorn, explaining their roles in API development and serving applications.\n\n- **Create a Basic FastAPI Application:** Walk students through building a simple FastAPI app, introducing key concepts like asynchronous endpoints and request handling.\n\n- **Implement Path Parameters:** Demonstrate how to make API endpoints dynamic by using path parameters, enhancing functionality and allowing variable input.\n\n- **Explore Pydantic Models:** Highlight the power of Pydantic models for data validation, showing students how to define and use models to ensure data integrity.\n\n- **Develop CRUD Operations:** Teach students how to implement Create, Read, Update, and Delete operations, emphasizing the importance of these operations in resource management.\n\n- **Customize API Documentation:** Explore FastAPI's auto-generated documentation feature, showing students how to customize API metadata, categorize endpoints using tags, and add detailed descriptions.\n\n## 1. Terminal Setup\n\n- **Create and Activate a Virtual Environment**\n  - **Virtual Environment Creation:**\n    - To create a virtual environment, use the command:\n      ```bash\n      python3 -m venv env\n      ```\n    - **Activate on Linux and macOS:**\n      ```bash\n      source env/bin/activate\n      ```\n    - **Activate on Windows:**\n      ```bash\n      env\\Scripts\\activate\n      ```\n\n## 2. Install FastAPI and Uvicorn\n\n- **Installation Commands:**\n  - Install FastAPI and Uvicorn using pip:\n    ```bash\n    pip install fastapi[standard]\n    pip install uvicorn[standard]\n    ```\n  - **Check Installation:**\n    - Verify the installation by checking the FastAPI version:\n      ```bash\n      fastapi --version\n      ```\n  - **Freeze Requirements:**\n    - Save the installed packages to a `requirements.txt` file:\n      ```bash\n      pip freeze > requirements.txt\n      ```\n\n## 3. Write and Test Your First FastAPI \"Hello, World!\" Endpoint\n\n- **Basic FastAPI Application:**\n  ```python\n  from fastapi import FastAPI\n\n  app = FastAPI()\n\n  @app.get(\"/\")\n  async def root():\n      return {\"message\": \"Hello World\"}\n  ```\n\n## 4. Run a Local FastAPI Development Server \n\n- **Using Uvicorn:**\n  - Run the server with the command:\n    ```bash\n    uvicorn app1:app\n    ```\n  - Here, `app1` is the name of the file, and `app` is the FastAPI object.\n\n## 5. Path Parameters in Queries\n\n- **Adding Parameters:**\n  - Define endpoints with path parameters:\n    ```python\n    @app.get(\"/text/{message}\")\n    async def read_message(message: str):\n        return {\"message\": message}\n\n    @app.get(\"/number/{number}\")\n    async def read_number(number: int):\n        return {\"number\": number}\n    ```\n## 6. Using Enums and Models\n\n- **Enum Example:**\n\n```python\nfrom enum import Enum\n\n# Using Enums with FastAPI\nclass PeopleName(str, Enum):\n    \"\"\"Enum for family members' names.\"\"\"\n    brother = \"Marc\"\n    sister = \"Marie\"\n    mother = \"Josette\"\n\n@app.get(\"/people/{person_name}\")\nasync def get_person(person_name: PeopleName):\n    \"\"\"Get details based on the family member's name.\"\"\"\n    if person_name == PeopleName.brother:\n        return {\"person_name\": person_name, \"message\": \"He's the best brother!\"}\n    if person_name == PeopleName.sister:\n        return {\"person_name\": person_name, \"message\": \"She's the best sister!\"}\n    if person_name == PeopleName.mother:\n        return {\"person_name\": person_name, \"message\": \"She's the best mother!\"}\n    \n    return {\"person_name\": person_name, \"message\": \"This person is not in our family!\"}\n```\n\n## 7. Pydantic Models for Data Validation\nHere are several examples showcasing how to use Pydantic with FastAPI, demonstrating its capabilities for data validation, serialization, and complex data structures. \n\n### 1. Basic Model Example\nThis example shows how to define a simple Pydantic model for a user and validate the data.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n# Define a Pydantic model for a User\nclass User(BaseModel):\n    name: str\n    email: EmailStr\n    age: int\n\n@app.post(\"/users/\")\nasync def create_user(user: User):\n    return {\"message\": \"User created successfully!\", \"user\": user}\n```\n\n### 2. Nested Models\nYou can define nested Pydantic models to represent more complex data structures.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\n# Define a model for an Address\nclass Address(BaseModel):\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\n# Define a model for a User with an Address\nclass UserWithAddress(BaseModel):\n    name: str\n    email: str\n    age: int\n    address: Address  # Nesting Address model\n\n@app.post(\"/users-with-address/\")\nasync def create_user_with_address(user: UserWithAddress):\n  return {\"message\": \"User with address created successfully!\", \"user\": user}\n```\n\n### 3. Using Default Values\nPydantic allows you to set default values for model fields.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# Define a model with default values\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_available: bool = True  # Default value\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return {\"message\": \"Item created successfully!\", \"item\": item}\n```\n\n### 4. Validating Data with Constraints\nYou can add constraints to model fields using Pydantic's built-in validators.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, constr\n\napp = FastAPI()\n\n# Define a model with constraints\nclass Product(BaseModel):\n    name: constr(min_length=1, max_length=100)  # Name must be 1-100 characters\n    price: float\n    quantity: int\n\n@app.post(\"/products/\")\nasync def create_product(product: Product):\n    return {\"message\": \"Product created successfully!\", \"product\": product}\n```\n\n### 5. Using Lists and Optional Fields\nPydantic can handle lists of items and optional fields.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# Define a model for an Order\nclass Order(BaseModel):\n    item_name: str\n    quantity: int\n    notes: Optional[str] = None  # Optional field\n\n# Define a model for a Cart\nclass Cart(BaseModel):\n    user_id: int\n    items: List[Order]  # List of Order items\n\n@app.post(\"/carts/\")\nasync def create_cart(cart: Cart):\n    return {\"message\": \"Cart created successfully!\", \"cart\": cart}\n```\n\n### 6. Complex Data Types\nYou can use Pydantic to define more complex types, such as dictionaries.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Dict\n\napp = FastAPI()\n\n# Define a model for a Configuration\nclass Configuration(BaseModel):\n    setting_name: str\n    value: str\n\n# Define a model for a System\nclass System(BaseModel):\n    name: str\n    configurations: Dict[str, Configuration]  # Dictionary of configurations\n\n@app.post(\"/systems/\")\nasync def create_system(system: System):\n    return {\"message\": \"System created successfully!\", \"system\": system}\n```\n\n## 8. CRUD Operations with FastAPI\n- **Manage Cars Database:**\n\n  ```python\n  from pydantic import BaseModel\n  from datetime import datetime\n\n  class Car(BaseModel):\n      brand: str\n      model: str\n      date: datetime\n      price: float\n  \n  cars_db = {}\n\n  # Get all cars\n  @app.get(\"/cars/\", response_model=List[Car])\n  async def get_all_cars():\n      return list(cars_db.values())\n\n  # Get a car by ID\n  @app.get(\"/cars/{car_id}\")\n  async def get_car(car_id: int):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      return cars_db[car_id]\n\n  # Add a new car\n  @app.post(\"/cars/\")\n  async def add_car(car: Car):\n      car_id = len(cars_db) + 1\n      cars_db[car_id] = car.dict()\n      return {\"message\": \"Car added successfully\", \"car\": car.dict()}\n\n  # Update an existing car\n  @app.put(\"/cars/{car_id}\")\n  async def update_car_price(car_id: int, car: Car):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      car.price *= 1.10  # Augment the price by 10%\n      cars_db[car_id] = car.dict()\n      return {\"message\": \"Car updated successfully with a 10% price increase\", \"car\": car.dict()}\n\n  # Delete a car\n  @app.delete(\"/cars/{car_id}\")\n  async def delete_car(car_id: int):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      del cars_db[car_id]\n      return {\"message\": \"Car deleted successfully\"}\n  ```\n\n## 9. Customizing FastAPI Documentation\n\n### 1. Customize the API Metadata\nModify the **title**, **description**, and **version** of the API when initializing the FastAPI instance. This helps in presenting important details about the API on the documentation page.\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"ð½ï¸ Recipe and Movie Collection API\",  # Custom API title\n    description=\"An API for managing recipes and movie collections. Manage, retrieve, and share your favorite items!\",  # Custom description\n    version=\"1.0.0\",  # Version of your API\n)\n```\n### 2. Add Tags with Descriptions\nUse the `tags_metadata` parameter to categorize endpoints and add descriptions. This allows users to easily understand different parts of your API.\n\n```python\ntags_metadata = [\n    {\n        \"name\": \"Introduction\",\n        \"description\": \"Basic introduction endpoints to get started.\",\n    },\n    {\n        \"name\": \"Recipe Management\",\n        \"description\": \"Endpoints for managing recipes including adding, retrieving, and deleting recipes.\",\n    },\n    {\n        \"name\": \"Movie Collection\",\n        \"description\": \"Endpoints for managing movie collections, including adding, retrieving, and deleting movies.\",\n    },\n]\n\napp = FastAPI(\n    openapi_tags=tags_metadata  # Apply tags metadata to FastAPI instance\n)\n```\n\n### 3. Document Each Endpoint\nAdd detailed docstrings to each endpoint. This enhances the auto-generated documentation and helps API users understand each endpoint's functionality, parameters, and responses.\n\n```python\n@app.get(\"/\", tags=[\"Introduction\"])\nasync def index():\n    \"\"\"\n    Returns a welcome message to introduce users to the API.\n\n    **Response:**\n    - `200`: A welcome message string.\n    \"\"\"\n    return {\"message\": \"Welcome to the Recipe and Movie Collection API!\"}\n\n@app.post(\"/recipes/\", tags=[\"Recipe Management\"])\nasync def add_recipe(recipe: Recipe):\n    \"\"\"\n    Add a new recipe to the collection.\n\n    **Request Body:**\n    - `title`: (string) The title of the recipe.\n    - `ingredients`: (list) The ingredients required.\n    - `instructions`: (string) The steps to prepare the recipe.\n\n    **Response:**\n    - `200`: Success message and the new recipe.\n    \"\"\"\n    # Recipe handling logic here\n    pass\n```\n\n### 4. Customizing OpenAPI Schema\nYou can customize the OpenAPI schema further by adding terms of service, license, or contact information. This is useful for providing more context about your API, especially for enterprise or public APIs.\n\n```python\napp = FastAPI(\n    title=\"ð½ï¸ Recipe and Movie Collection API\",\n    description=\"An API for managing recipes and movie collections.\",\n    version=\"1.0.0\",\n    contact={\n        \"name\": \"API Support Team\",\n        \"email\": \"support@example.com\",\n        \"url\": \"https://example.com/support\"\n    },\n    license_info={\n        \"name\": \"MIT License\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n    terms_of_service=\"https://example.com/terms/\"\n)\n```\nHere's the updated code with enhanced documentation customization:\n\n```python\nimport uvicorn\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List\n\n# Description for the API\ndescription = \"\"\"\nWelcome to the Combined Recipe and Movie Collection API! \n\n## Recipe Management\nManage and share your favorite recipes. Users can add, update, delete, and retrieve recipes, along with their ingredients and instructions.\n\n## Movie Collection\nKeep track of your favorite movies. Users can manage their movie collection, including details like the title, director, and release year.\n\nCheck out documentation below ð for more information on each endpoint.\n\"\"\"\n\n# Tags metadata for the API documentation\ntags_metadata = [\n    {\n        \"name\": \"Introduction Endpoints\",\n        \"description\": \"Simple endpoints to try out!\",\n    },\n    {\n        \"name\": \"Recipe Management\",\n        \"description\": \"Manage and share your favorite recipes.\",\n    },\n    {\n        \"name\": \"Movie Collection\",\n        \"description\": \"Keep track of your favorite movies.\",\n    },\n]\n\napp = FastAPI(\n    title=\"ð Recipe and Movie Collection API\",\n    description=description,\n    version=\"0.1\",\n    contact={\n        \"name\": \"MÃ©nyssa Cherifa-Luron\",\n        \"email\": \"cmenyssa@live.fr\",\n        \"url\": \"menyssacherifaluron.com\",\n    },\n    license_info={\n        \"name\": \"MIT License\",\n        \"url\": \"https://opensource.org/licenses/MIT\"\n    },\n    openapi_tags=tags_metadata\n)\n\n# Recipe Model\nclass Recipe(BaseModel):\n    title: str\n    ingredients: List[str]\n    instructions: str\n    cook_time: int  # in minutes\n\n# Database simulation\nrecipes_db = {}\n\n# Movie Model\nclass Movie(BaseModel):\n    title: str\n    director: str\n    year: int\n    genre: str\n\n# Movie Database\nmovies_db = {}\n\n@app.get(\"/\", tags=[\"Introduction Endpoints\"])\nasync def index():\n    \"\"\"\n    Simply returns a welcome message!\n    \"\"\"\n    message = \"Hello world! This `/` is the most simple and default endpoint. If you want to learn more, check out documentation of the api at `/docs`\"\n    return message\n\n# Recipe Endpoints\n\n@app.get(\"/recipes/\", response_model=List[Recipe], tags=[\"Recipe Management\"])\nasync def get_all_recipes():\n    \"\"\"\n    Retrieve a list of all recipes.\n    \"\"\"\n    return list(recipes_db.values())\n\n@app.get(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def get_recipe(recipe_id: int):\n    \"\"\"\n    Retrieve details of a specific recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    return recipes_db[recipe_id]\n\n@app.post(\"/recipes/\", tags=[\"Recipe Management\"])\nasync def add_recipe(recipe: Recipe):\n    \"\"\"\n    Add a new recipe.\n    \"\"\"\n    recipe_id = len(recipes_db) + 1\n    recipes_db[recipe_id] = recipe.dict()\n    return {\"message\": \"Recipe added successfully\", \"recipe\": recipe.dict()}\n\n@app.put(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def update_recipe(recipe_id: int, recipe: Recipe):\n    \"\"\"\n    Update an existing recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    recipes_db[recipe_id] = recipe.dict()\n    return {\"message\": \"Recipe updated successfully\", \"recipe\": recipe.dict()}\n\n@app.delete(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def delete_recipe(recipe_id: int):\n    \"\"\"\n    Delete a recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    del recipes_db[recipe_id]\n    return {\"message\": \"Recipe deleted successfully\"}\n\n# Movie Endpoints\n\n@app.get(\"/movies/\", response_model=List[Movie], tags=[\"Movie Collection\"])\nasync def get_all_movies():\n    \"\"\"\n    Retrieve a list of all movies.\n    \"\"\"\n    return list(movies_db.values())\n\n@app.get(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def get_movie(movie_id: int):\n    \"\"\"\n    Retrieve details of a specific movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    return movies_db[movie_id]\n\n@app.post(\"/movies/\", tags=[\"Movie Collection\"])\nasync def add_movie(movie: Movie):\n    \"\"\"\n    Add a new movie.\n    \"\"\"\n    movie_id = len(movies_db) + 1\n    movies_db[movie_id] = movie.dict()\n    return {\"message\": \"Movie added successfully\", \"movie\": movie.dict()}\n\n@app.put(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def update_movie(movie_id: int, movie: Movie):\n    \"\"\"\n    Update an existing movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    movies_db[movie_id] = movie.dict()\n    return {\"message\": \"Movie updated successfully\", \"movie\": movie.dict()}\n\n@app.delete(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def delete_movie(movie_id: int):\n    \"\"\"\n    Delete a movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    del movies_db[movie_id]\n    return {\"message\": \"Movie deleted successfully\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n```\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n## Overview\n\nIn this lab, you will guide your students through setting up their development environment and creating foundational API endpoints using FastAPI. \n\nThese exercises are designed to build proficiency in constructing robust APIs. Encourage students to ask questions and explore, as they embark on their coding journey. May the code be with them! \n\n## Goals\n\nYou will help students achieve the following:\n\n- **Set up a Virtual Environment:** Ensure students understand how to create and activate a virtual environment for Python projects, emphasizing the importance of isolated environments for dependency management.\n\n- **Install FastAPI and Uvicorn:** Guide students through installing FastAPI and Uvicorn, explaining their roles in API development and serving applications.\n\n- **Create a Basic FastAPI Application:** Walk students through building a simple FastAPI app, introducing key concepts like asynchronous endpoints and request handling.\n\n- **Implement Path Parameters:** Demonstrate how to make API endpoints dynamic by using path parameters, enhancing functionality and allowing variable input.\n\n- **Explore Pydantic Models:** Highlight the power of Pydantic models for data validation, showing students how to define and use models to ensure data integrity.\n\n- **Develop CRUD Operations:** Teach students how to implement Create, Read, Update, and Delete operations, emphasizing the importance of these operations in resource management.\n\n- **Customize API Documentation:** Explore FastAPI's auto-generated documentation feature, showing students how to customize API metadata, categorize endpoints using tags, and add detailed descriptions.\n\n## 1. Terminal Setup\n\n- **Create and Activate a Virtual Environment**\n  - **Virtual Environment Creation:**\n    - To create a virtual environment, use the command:\n      ```bash\n      python3 -m venv env\n      ```\n    - **Activate on Linux and macOS:**\n      ```bash\n      source env/bin/activate\n      ```\n    - **Activate on Windows:**\n      ```bash\n      env\\Scripts\\activate\n      ```\n\n## 2. Install FastAPI and Uvicorn\n\n- **Installation Commands:**\n  - Install FastAPI and Uvicorn using pip:\n    ```bash\n    pip install fastapi[standard]\n    pip install uvicorn[standard]\n    ```\n  - **Check Installation:**\n    - Verify the installation by checking the FastAPI version:\n      ```bash\n      fastapi --version\n      ```\n  - **Freeze Requirements:**\n    - Save the installed packages to a `requirements.txt` file:\n      ```bash\n      pip freeze > requirements.txt\n      ```\n\n## 3. Write and Test Your First FastAPI \"Hello, World!\" Endpoint\n\n- **Basic FastAPI Application:**\n  ```python\n  from fastapi import FastAPI\n\n  app = FastAPI()\n\n  @app.get(\"/\")\n  async def root():\n      return {\"message\": \"Hello World\"}\n  ```\n\n## 4. Run a Local FastAPI Development Server \n\n- **Using Uvicorn:**\n  - Run the server with the command:\n    ```bash\n    uvicorn app1:app\n    ```\n  - Here, `app1` is the name of the file, and `app` is the FastAPI object.\n\n## 5. Path Parameters in Queries\n\n- **Adding Parameters:**\n  - Define endpoints with path parameters:\n    ```python\n    @app.get(\"/text/{message}\")\n    async def read_message(message: str):\n        return {\"message\": message}\n\n    @app.get(\"/number/{number}\")\n    async def read_number(number: int):\n        return {\"number\": number}\n    ```\n## 6. Using Enums and Models\n\n- **Enum Example:**\n\n```python\nfrom enum import Enum\n\n# Using Enums with FastAPI\nclass PeopleName(str, Enum):\n    \"\"\"Enum for family members' names.\"\"\"\n    brother = \"Marc\"\n    sister = \"Marie\"\n    mother = \"Josette\"\n\n@app.get(\"/people/{person_name}\")\nasync def get_person(person_name: PeopleName):\n    \"\"\"Get details based on the family member's name.\"\"\"\n    if person_name == PeopleName.brother:\n        return {\"person_name\": person_name, \"message\": \"He's the best brother!\"}\n    if person_name == PeopleName.sister:\n        return {\"person_name\": person_name, \"message\": \"She's the best sister!\"}\n    if person_name == PeopleName.mother:\n        return {\"person_name\": person_name, \"message\": \"She's the best mother!\"}\n    \n    return {\"person_name\": person_name, \"message\": \"This person is not in our family!\"}\n```\n\n## 7. Pydantic Models for Data Validation\nHere are several examples showcasing how to use Pydantic with FastAPI, demonstrating its capabilities for data validation, serialization, and complex data structures. \n\n### 1. Basic Model Example\nThis example shows how to define a simple Pydantic model for a user and validate the data.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()\n\n# Define a Pydantic model for a User\nclass User(BaseModel):\n    name: str\n    email: EmailStr\n    age: int\n\n@app.post(\"/users/\")\nasync def create_user(user: User):\n    return {\"message\": \"User created successfully!\", \"user\": user}\n```\n\n### 2. Nested Models\nYou can define nested Pydantic models to represent more complex data structures.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\n# Define a model for an Address\nclass Address(BaseModel):\n    street: str\n    city: str\n    state: str\n    zip_code: str\n\n# Define a model for a User with an Address\nclass UserWithAddress(BaseModel):\n    name: str\n    email: str\n    age: int\n    address: Address  # Nesting Address model\n\n@app.post(\"/users-with-address/\")\nasync def create_user_with_address(user: UserWithAddress):\n  return {\"message\": \"User with address created successfully!\", \"user\": user}\n```\n\n### 3. Using Default Values\nPydantic allows you to set default values for model fields.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n# Define a model with default values\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_available: bool = True  # Default value\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return {\"message\": \"Item created successfully!\", \"item\": item}\n```\n\n### 4. Validating Data with Constraints\nYou can add constraints to model fields using Pydantic's built-in validators.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, constr\n\napp = FastAPI()\n\n# Define a model with constraints\nclass Product(BaseModel):\n    name: constr(min_length=1, max_length=100)  # Name must be 1-100 characters\n    price: float\n    quantity: int\n\n@app.post(\"/products/\")\nasync def create_product(product: Product):\n    return {\"message\": \"Product created successfully!\", \"product\": product}\n```\n\n### 5. Using Lists and Optional Fields\nPydantic can handle lists of items and optional fields.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# Define a model for an Order\nclass Order(BaseModel):\n    item_name: str\n    quantity: int\n    notes: Optional[str] = None  # Optional field\n\n# Define a model for a Cart\nclass Cart(BaseModel):\n    user_id: int\n    items: List[Order]  # List of Order items\n\n@app.post(\"/carts/\")\nasync def create_cart(cart: Cart):\n    return {\"message\": \"Cart created successfully!\", \"cart\": cart}\n```\n\n### 6. Complex Data Types\nYou can use Pydantic to define more complex types, such as dictionaries.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Dict\n\napp = FastAPI()\n\n# Define a model for a Configuration\nclass Configuration(BaseModel):\n    setting_name: str\n    value: str\n\n# Define a model for a System\nclass System(BaseModel):\n    name: str\n    configurations: Dict[str, Configuration]  # Dictionary of configurations\n\n@app.post(\"/systems/\")\nasync def create_system(system: System):\n    return {\"message\": \"System created successfully!\", \"system\": system}\n```\n\n## 8. CRUD Operations with FastAPI\n- **Manage Cars Database:**\n\n  ```python\n  from pydantic import BaseModel\n  from datetime import datetime\n\n  class Car(BaseModel):\n      brand: str\n      model: str\n      date: datetime\n      price: float\n  \n  cars_db = {}\n\n  # Get all cars\n  @app.get(\"/cars/\", response_model=List[Car])\n  async def get_all_cars():\n      return list(cars_db.values())\n\n  # Get a car by ID\n  @app.get(\"/cars/{car_id}\")\n  async def get_car(car_id: int):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      return cars_db[car_id]\n\n  # Add a new car\n  @app.post(\"/cars/\")\n  async def add_car(car: Car):\n      car_id = len(cars_db) + 1\n      cars_db[car_id] = car.dict()\n      return {\"message\": \"Car added successfully\", \"car\": car.dict()}\n\n  # Update an existing car\n  @app.put(\"/cars/{car_id}\")\n  async def update_car_price(car_id: int, car: Car):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      car.price *= 1.10  # Augment the price by 10%\n      cars_db[car_id] = car.dict()\n      return {\"message\": \"Car updated successfully with a 10% price increase\", \"car\": car.dict()}\n\n  # Delete a car\n  @app.delete(\"/cars/{car_id}\")\n  async def delete_car(car_id: int):\n      if car_id not in cars_db:\n          raise HTTPException(status_code=404, detail=\"Car not found\")\n      del cars_db[car_id]\n      return {\"message\": \"Car deleted successfully\"}\n  ```\n\n## 9. Customizing FastAPI Documentation\n\n### 1. Customize the API Metadata\nModify the **title**, **description**, and **version** of the API when initializing the FastAPI instance. This helps in presenting important details about the API on the documentation page.\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"ð½ï¸ Recipe and Movie Collection API\",  # Custom API title\n    description=\"An API for managing recipes and movie collections. Manage, retrieve, and share your favorite items!\",  # Custom description\n    version=\"1.0.0\",  # Version of your API\n)\n```\n### 2. Add Tags with Descriptions\nUse the `tags_metadata` parameter to categorize endpoints and add descriptions. This allows users to easily understand different parts of your API.\n\n```python\ntags_metadata = [\n    {\n        \"name\": \"Introduction\",\n        \"description\": \"Basic introduction endpoints to get started.\",\n    },\n    {\n        \"name\": \"Recipe Management\",\n        \"description\": \"Endpoints for managing recipes including adding, retrieving, and deleting recipes.\",\n    },\n    {\n        \"name\": \"Movie Collection\",\n        \"description\": \"Endpoints for managing movie collections, including adding, retrieving, and deleting movies.\",\n    },\n]\n\napp = FastAPI(\n    openapi_tags=tags_metadata  # Apply tags metadata to FastAPI instance\n)\n```\n\n### 3. Document Each Endpoint\nAdd detailed docstrings to each endpoint. This enhances the auto-generated documentation and helps API users understand each endpoint's functionality, parameters, and responses.\n\n```python\n@app.get(\"/\", tags=[\"Introduction\"])\nasync def index():\n    \"\"\"\n    Returns a welcome message to introduce users to the API.\n\n    **Response:**\n    - `200`: A welcome message string.\n    \"\"\"\n    return {\"message\": \"Welcome to the Recipe and Movie Collection API!\"}\n\n@app.post(\"/recipes/\", tags=[\"Recipe Management\"])\nasync def add_recipe(recipe: Recipe):\n    \"\"\"\n    Add a new recipe to the collection.\n\n    **Request Body:**\n    - `title`: (string) The title of the recipe.\n    - `ingredients`: (list) The ingredients required.\n    - `instructions`: (string) The steps to prepare the recipe.\n\n    **Response:**\n    - `200`: Success message and the new recipe.\n    \"\"\"\n    # Recipe handling logic here\n    pass\n```\n\n### 4. Customizing OpenAPI Schema\nYou can customize the OpenAPI schema further by adding terms of service, license, or contact information. This is useful for providing more context about your API, especially for enterprise or public APIs.\n\n```python\napp = FastAPI(\n    title=\"ð½ï¸ Recipe and Movie Collection API\",\n    description=\"An API for managing recipes and movie collections.\",\n    version=\"1.0.0\",\n    contact={\n        \"name\": \"API Support Team\",\n        \"email\": \"support@example.com\",\n        \"url\": \"https://example.com/support\"\n    },\n    license_info={\n        \"name\": \"MIT License\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n    terms_of_service=\"https://example.com/terms/\"\n)\n```\nHere's the updated code with enhanced documentation customization:\n\n```python\nimport uvicorn\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List\n\n# Description for the API\ndescription = \"\"\"\nWelcome to the Combined Recipe and Movie Collection API! \n\n## Recipe Management\nManage and share your favorite recipes. Users can add, update, delete, and retrieve recipes, along with their ingredients and instructions.\n\n## Movie Collection\nKeep track of your favorite movies. Users can manage their movie collection, including details like the title, director, and release year.\n\nCheck out documentation below ð for more information on each endpoint.\n\"\"\"\n\n# Tags metadata for the API documentation\ntags_metadata = [\n    {\n        \"name\": \"Introduction Endpoints\",\n        \"description\": \"Simple endpoints to try out!\",\n    },\n    {\n        \"name\": \"Recipe Management\",\n        \"description\": \"Manage and share your favorite recipes.\",\n    },\n    {\n        \"name\": \"Movie Collection\",\n        \"description\": \"Keep track of your favorite movies.\",\n    },\n]\n\napp = FastAPI(\n    title=\"ð Recipe and Movie Collection API\",\n    description=description,\n    version=\"0.1\",\n    contact={\n        \"name\": \"MÃ©nyssa Cherifa-Luron\",\n        \"email\": \"cmenyssa@live.fr\",\n        \"url\": \"menyssacherifaluron.com\",\n    },\n    license_info={\n        \"name\": \"MIT License\",\n        \"url\": \"https://opensource.org/licenses/MIT\"\n    },\n    openapi_tags=tags_metadata\n)\n\n# Recipe Model\nclass Recipe(BaseModel):\n    title: str\n    ingredients: List[str]\n    instructions: str\n    cook_time: int  # in minutes\n\n# Database simulation\nrecipes_db = {}\n\n# Movie Model\nclass Movie(BaseModel):\n    title: str\n    director: str\n    year: int\n    genre: str\n\n# Movie Database\nmovies_db = {}\n\n@app.get(\"/\", tags=[\"Introduction Endpoints\"])\nasync def index():\n    \"\"\"\n    Simply returns a welcome message!\n    \"\"\"\n    message = \"Hello world! This `/` is the most simple and default endpoint. If you want to learn more, check out documentation of the api at `/docs`\"\n    return message\n\n# Recipe Endpoints\n\n@app.get(\"/recipes/\", response_model=List[Recipe], tags=[\"Recipe Management\"])\nasync def get_all_recipes():\n    \"\"\"\n    Retrieve a list of all recipes.\n    \"\"\"\n    return list(recipes_db.values())\n\n@app.get(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def get_recipe(recipe_id: int):\n    \"\"\"\n    Retrieve details of a specific recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    return recipes_db[recipe_id]\n\n@app.post(\"/recipes/\", tags=[\"Recipe Management\"])\nasync def add_recipe(recipe: Recipe):\n    \"\"\"\n    Add a new recipe.\n    \"\"\"\n    recipe_id = len(recipes_db) + 1\n    recipes_db[recipe_id] = recipe.dict()\n    return {\"message\": \"Recipe added successfully\", \"recipe\": recipe.dict()}\n\n@app.put(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def update_recipe(recipe_id: int, recipe: Recipe):\n    \"\"\"\n    Update an existing recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    recipes_db[recipe_id] = recipe.dict()\n    return {\"message\": \"Recipe updated successfully\", \"recipe\": recipe.dict()}\n\n@app.delete(\"/recipes/{recipe_id}\", tags=[\"Recipe Management\"])\nasync def delete_recipe(recipe_id: int):\n    \"\"\"\n    Delete a recipe by ID.\n    \"\"\"\n    if recipe_id not in recipes_db:\n        raise HTTPException(status_code=404, detail=\"Recipe not found\")\n    del recipes_db[recipe_id]\n    return {\"message\": \"Recipe deleted successfully\"}\n\n# Movie Endpoints\n\n@app.get(\"/movies/\", response_model=List[Movie], tags=[\"Movie Collection\"])\nasync def get_all_movies():\n    \"\"\"\n    Retrieve a list of all movies.\n    \"\"\"\n    return list(movies_db.values())\n\n@app.get(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def get_movie(movie_id: int):\n    \"\"\"\n    Retrieve details of a specific movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    return movies_db[movie_id]\n\n@app.post(\"/movies/\", tags=[\"Movie Collection\"])\nasync def add_movie(movie: Movie):\n    \"\"\"\n    Add a new movie.\n    \"\"\"\n    movie_id = len(movies_db) + 1\n    movies_db[movie_id] = movie.dict()\n    return {\"message\": \"Movie added successfully\", \"movie\": movie.dict()}\n\n@app.put(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def update_movie(movie_id: int, movie: Movie):\n    \"\"\"\n    Update an existing movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    movies_db[movie_id] = movie.dict()\n    return {\"message\": \"Movie updated successfully\", \"movie\": movie.dict()}\n\n@app.delete(\"/movies/{movie_id}\", tags=[\"Movie Collection\"])\nasync def delete_movie(movie_id: int):\n    \"\"\"\n    Delete a movie by ID.\n    \"\"\"\n    if movie_id not in movies_db:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    del movies_db[movie_id]\n    return {\"message\": \"Movie deleted successfully\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n```\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"01_Lab_Solutions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","code-summary":"Show the code","theme":{"light":["flatly","../styles.scss"]},"title":"Lab 1 - Introduction to FastAPI & Development Setup","subtitle":"Solutions","author":"MÃ©nyssa Cherifa-Luron","date":"today"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}